## Работа 5. Детектирование границ документов на кадрах видео
автор: Альмиева Р. Р. 

дата: @time_stemp@

url: https://github.com/idRain/almieva_r_r/tree/main/prj.labs/lab05

### Задание
0. текст, иллюстрации и подписи отчета придумываем самостоятельно
1. используем данные из лаб. 4
2. выделяем границы и находим внешнюю рамку документа
3. руками изготавливаем векторную разметку (идеальная рамка купюры)
4. оцениваем качество и анализируем ошибки

### Описание алгоритма

1. Изображение в BGR формате цветоредуцируется с помощью параметра COLOR_RGB2GRAY метода cvtColor, где значения пикселя в каналах складываются с весами: $0.299*R+0.587*G+0.114*B$

2. Цветоредуцированное изображение уменьшается в 8 раз

3. Проводится фильтрация, а именно, размытие по Гауссу с размером ядра (3, 3) и со стандартным отклонением ядра по x и по y равным 1.

4. Для нахождения вершин углов, принадлежащих купюре используется метод goodFeaturesToTrack, в который передается вектор, куда записываются точки, максимальное количество найденный углов - 30, минимально допустимое качество углов 0.0001, минимально возможное расстояние между точками  - 1, true, чтобы использовать детектор Харриса как алгоритм для детектирования углов.

   Допускается, что все детектированные вершины будут принадлежать граничной или внутренней части купюры.

5. Из детектированных вершин углов находятся те, что являются граничными точками для купюры. То есть, если координата вершины $A$($x_0$, $y_0$),  тогда

   $B$($x_1$, $y_1$) - точка пересечения горизонтальной стороны изображения и луча с началом в точке ($x_0$, $y_0$), перпендикулярного горизонтальной стороне изображения

   $D$($x_2$, $y_2$) - точка пересечения вертикальной стороны изображения и луча с началом в точке ($x_0$, $y_0$), перпендикулярного вертикальной стороне изображения

   $C$($x_3$, $y_3$) - вершина изображения, выбранная таким образом, чтобы $ABCD$ образовывала прямоугольник

   Таким образом можно получить 4 прямоугольника, меняя направление лучей на противоположные

   Если хотя бы в одном прямоугольнике находится единственная вершина $A$, то $A$ является граничной точкой купюры

6. Для каждой из граничных точек считается максимальный угол, который она может образовать с другими. Точки сортируются по возрастанию значения вычисленного угла. Первые 4 с наименьшими углами будут являться вершинами искомого четырехугольника.

   $(A_0, A_1, A_2, A_3, ..., A_{n-1})$ - граничные точки

   1. Находятся углы, образовываемые точками следующим образом:  $\alpha_{i_t} = \angle(A_kA_iA_j)$, где $k \neq i, j \neq i, j \neq k$

   2. Для всех найденных углов $(\alpha_{i_0}, \alpha_{i_1}, \alpha_{i_2}, ..., \alpha_{i_{m-1}})$ для $A_i$, где $m = \frac{n!}{3! * (n - 3)!}, t\in m$, берется  $\alpha_i = max(\alpha_{i_0}, \alpha_{i_1}, \alpha_{i_2}, ..., \alpha_{i_{m-1}})$

   3. Формируется вектор состоящий из пар: точка и соответствующий ей угол, вычисленный на предыдущем шаге

      $vector = (\{A_0, \alpha_0\}, \{A_1, \alpha_1\}, \{A_2, \alpha_2\}, ..., \{A_{n-1}, \alpha_{n-1}\})$

   4. $vector$ сортируется по возрастанию $\alpha_i$. Берутся первые точки $A_i$ из первых четырех членов отсортированного вектора
   5. Полученные четыре точки располагаются порядке, когда левый нижний угол - это нулевая точка, а далее по часовой стрелке. Для этого вычисляется точка в центре прямоугольника и относительно нее находится положение найденных четырех точек, которые являются вершинами пространственно искаженного прямоугольника
   6. Координаты полученных вершин умножаются на 8, для получения их координат на оригинальном размере

7. После соединения найденных вершин в порядке $0 \rightarrow 1  \rightarrow 2 \rightarrow 3 \rightarrow 0$ получается искомая граница

### Исходные данные

| ![](bgr1.png)  | ![](bgr2.png)  | ![](bgr3.png)  | ![](bgr4.png)  | ![](bgr5.png)  |
| -------------- | -------------- | -------------- | -------------- | -------------- |
| ![](bgr6.png)  | ![](bgr7.png)  | ![](bgr8.png)  | ![](bgr9.png)  | ![](bgr10.png) |
| ![](bgr11.png) | ![](bgr12.png) | ![](bgr13.png) | ![](bgr14.png) | ![](bgr15.png) |

Рис. 1-15. Цветные изображения

### Результаты

Результаты демонстрируются на двух изображениях: 10 (хорошо распознанная граница) и 15 (границы сливаются с фоном, в качестве граничных распознаются внутренние точки купюры)

| ![](gray10.png) Рис. 16. Результат бинаризации | ![](gray15.png) Рис. 17. Результат бинаризации |
| ---------------------------------------------- | ---------------------------------------------- |

Распознанные точки купюры, обозначающие вершины найденных углов:

| ![](points_map10.png) Рис. 18. Карта точек | ![](points_map15.png) Рис. 19. Карта точек |
| ------------------------------------------ | ------------------------------------------ |

Для визуализации результата распознанная программно граница купюры выделена красным цветом, а эталонная - зеленым.

Здесь наблюдается ошибка, общая для всех изображений: детектированная граница лежит внутри эталонной, это связано с тем, что вершины пространственно искаженного прямоугольника детектировались на уменьшенном в 8 раз изображении и после их координаты умножались на 8.

| ![](corners10.png) Рис. 20. Визуализация результата | ![](corners15.png) Рис. 21. Визуализация результата |
| --------------------------------------------------- | --------------------------------------------------- |

### Оценка качества

$n = 15$ - количество изображений

$i \in \{0, 1, ..., n-1\}$

$(A_{i_0}, A_{i_1}, A_{i_2}, A_{i_3})$ - детектированные вершины

$(B_{i_0}, B_{i_1}, B_{i_2}, B_{i_3})$ - эталонные вершины

$L_i = max(\|A_{i_0}, B_{i_0}\|, \|A_{i_1}, B_{i_1}\|, \|A_{i_2}, B_{i_2}\|, \|A_{i_3}, B_{i_3}\|)$

, где $\|A_{i_j}, B_{i_j}\|$ - расстояние между точками

$err_i = \frac{L_i}{P_B}$, где ${P_B}$ - периметр эталонного четырехугольника

Оценка качества: $err =\frac{\sum{err_i}}{n}$

Таким образом, найденная оценка качества $err = 0.029$

### Текст программы

```cpp
@cpp_source@
```
